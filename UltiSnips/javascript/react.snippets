priority -49

snippet ir "import react" b
import React from 'react'
endsnippet

snippet irc "import react and component" b
import React, { Component } from 'react'
endsnippet

snippet ird "import react-dom" b
import ReactDOM from 'react-dom'
endsnippet

snippet irp "import react prop-types" b
import PropTypes from 'prop-types'
endsnippet

snippet rren "ReactDOM.render()" b
ReactDOM.render(${0})
endsnippet

snippet rsc "react stateless component" b
const ${1:ComponentName} = (${2:props}) => {
  return (
    ${0:<div />}
  )
}

export default $1
endsnippet

snippet rcc "react class component" b
class ${1:ComponentName} extends Component {
  render() {
    return (
      ${0:<div />}
    )
  }
}

export default $1
endsnippet

snippet ct "react class constructor" b
constructor(props) {
  super(props)
  ${0}
}
endsnippet

snippet cwm "componentWillMount" b
componentWillMount() {
  ${0}
}
endsnippet

snippet cdm "componentDidMount" b
componentDidMount() {
  ${0}
}
endsnippet

snippet cwp "componentWillReceiveProps" b
componentWillReceiveProps(${1:nextProps}) {
  ${0}
}
endsnippet

snippet scu "shouldComponentUpdate" b
shouldComponentUpdate(${1:nextProps, nextState}) {
  ${0}
}
endsnippet

snippet cwu "componentWillUpdate" b
componentWillUpdate(${1:nextProps, nextState}) {
  ${0}
}
endsnippet

snippet cdu "componentDidUpdate" b
componentDidUpdate(${1:prevProps, prevState}) {
  ${0}
}
endsnippet

snippet cwum "componentWillUnmount" b
componentWillUnmount() {
  ${0}
}
endsnippet

snippet fup "forceUpdate"
forceUpdate(${0})
endsnippet

snippet ren "render" b
render() {
  return (${0})
}
endsnippet

snippet state "this.state" i
this.state${0}
endsnippet

snippet set "this.setState()" b
this.setState({
  ${1}: ${0},
})
endsnippet

snippet props "this.props" i
this.props${0}
endsnippet

snippet dp "set default props" i
defalutProps = {
  ${0}
}
endsnippet

snippet refs "refs"
this.refs${0}
endsnippet

snippet fdn "findDOMNode" b
React.findDOMNode(${0})
endsnippet

snippet pt "propTypes" i
propTypes = {
  ${0}
}
endsnippet

snippet pt.a "PropTypes array" i
PropTypes.array
endsnippet

snippet pt.b "PropTypes bool" i
PropTypes.bool
endsnippet

snippet pt.f "PropTypes func" i
PropTypes.func
endsnippet

snippet pt.n "PropTypes number" i
PropTypes.number
endsnippet

snippet pt.o "PropTypes object" i
PropTypes.object
endsnippet

snippet pt.s "PropTypes string" i
PropTypes.string
endsnippet

snippet pt.sb "PropTypes symbol" i
PropTypes.symbol
endsnippet

snippet pt.no "PropTypes node" i
PropTypes.node
endsnippet

snippet pt.e "PropTypes element" i
PropTypes.element
endsnippet

snippet pt.if "PropTypes instanceOf" i
PropTypes.instanceOf(${0})
endsnippet

snippet pt.of "PropTypes oneOf" i
PropTypes.oneOf(${0})
endsnippet

snippet ptoft "PropTypes oneOfType" i
PropTypes.oneOfType(${0})
endsnippet

snippet pt.af "PropTypes arrayOf" i
PropTypes.arrayOf(${0})
endsnippet

snippet pt.oo "PropTypes objectOf" i
PropTypes.objectOf(${0})
endsnippet

snippet pt.sp "PropTypes shape" i
PropTypes.shape({
  ${0}
})
endsnippet

snippet .isR "PropTypes isRequired" i
.isRequired
endsnippet

