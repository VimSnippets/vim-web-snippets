priority -20

snippet req "const ... = require(...)" b
const ${1} = require('${2}')
endsnippet

snippet im "import ... from ..." b
import ${1} from '${2}'
endsnippet

snippet imm "import { ... } from ..." b
import { ${1} } from '${2}'
endsnippet

snippet imas "import * as ... from ..." b
import * as ${1} from '${2}'
endsnippet

snippet ed "exports defaulr"
export default ${0}
endsnippet

snippet me "module.exports"
module.exports = ${0}
endsnippet

snippet if "if ..." b
if (${1}) {
  ${0:${VISUAL}}
}
endsnippet

snippet el "else ..."
else {
  ${0:${VISUAL}}
}
endsnippet

snippet elif "else if ..."
else if (${1}) {
  ${0:${VISUAL}}
}
endsnippet

snippet sw "switch ..." b
switch (${1}) {
  case ${2}:
    ${0}
    break
  default:
}
endsnippet

snippet case "case ..." b
  case ${1}:
    ${0}
    break
endsnippet

snippet try "try ... catch(e) ..." b
try {
  ${1:${VISUAL}}
} catch (${2:err}) {${0}}
endsnippet

snippet tryf "try ... catch(e) ... finally ..." b
try {
  ${1:${VISUAL}}
} catch (${2:err}) {
  ${3}
} finally {
  ${0}
}
endsnippet

snippet throw "thorw Error"
throw new Error(${0})
endsnippet

snippet ret "return"
return ${0}
endsnippet

snippet for "for ..." b
for (${1}) {
  ${0:${VISUAL}}
}
endsnippet

snippet while "while ..." b
while (${1}) {
  ${0:${VISUAL}}
}
endsnippet


snippet do "do ..." b
do {
  ${1:${VISUAL}}
} while (${0});
endsnippet

snippet func "function" i
function ${1}(${2}) {
  ${0:${VISUAL}}
}
endsnippet

snippet (f "iife function" b
(function (${1}) {
  ${2:${VISUAL}}
}(${0}))
endsnippet

snippet ;f "iife function" b
;(function (${1}) {
  ${2:${VISUAL}}
}(${0}))
endsnippet

snippet f* "generator function" i
function* ${1}(${2}) {
  ${0:${VISUAL}}
}
endsnippet

snippet *f "generator function" b
* ${1}(${2}) {
  ${0:${VISUAL}}
},
endsnippet

snippet => "arrow function" i
(${1}) => ${0:${VISUAL}}
endsnippet

snippet cla "class ..." b
class ${1} {
  ${0:${VISUAL}}
}
endsnippet

snippet clax "class ... extends ..." b
class ${1} extends ${2} {
  ${0:${VISUAL}}
}
endsnippet

snippet clac "class ... { constructor() ... }" b
class ${1} {
  constructor(${2}) {
    ${0:${VISUAL}}
  }
}
endsnippet

snippet con "constructor () { ... }" b
constructor(${1}) {
  ${0:${VISUAL}}
}
endsnippet

snippet pro "prototype"
${1:class}.prototype.${0:method}
endsnippet

snippet by. "elements by class" b
${1:document}.getElementsByClassName('${0}')
endsnippet

snippet by# "element by id" b
${1:document}.getElementById('${0}')
endsnippet

snippet qs "query selector" b
${1:document}.querySelector('${0}')
endsnippet

snippet qsa "query selector all" b
${1:document}.querySelectorAll('${0}')
endsnippet

snippet de "debugger" b
debugger
endsnippet

snippet log "console.log" b
console.log(${0})
endsnippet

snippet debug "console.debug" b
console.debug(${0})
endsnippet

snippet #! "shebang"
#!/usr/bin/env node
endsnippet

snippet us "use strict"
'use strict'
endsnippet

snippet sett "set timeout"
setTimeout(${1}, ${0:0})
endsnippet

